import logging
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode, ChatType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ChatPermissions, ReplyKeyboardMarkup, KeyboardButton
import random
import requests
import os
from functools import lru_cache

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    datefmt='%H:%M:%S')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
TOKEN = os.environ['BOT_TOKEN']
ADMIN_IDS = tuple(int(id) for id in os.environ['ADMIN_IDS'].split(','))
GROUP_ID = int(os.environ['GROUP_ID'])
GROUP_LINK = os.environ['GROUP_LINK']
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')
GOOGLE_CX_ID = os.environ.get('GOOGLE_CX_ID')
LIST_ADMIN_ID = tuple(
    int(id) for id in os.environ.get('LIST_ADMIN_ID', '').split(
        ',')) if os.environ.get('LIST_ADMIN_ID') else ()

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
from aiogram.client.default import DefaultBotProperties

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}
message_counts = {}
MAX_MESSAGES = 5


# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
@lru_cache(maxsize=2)
def get_menu():
    return ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[[KeyboardButton(text="–†–µ—Å—Ç"),
                   KeyboardButton(text="–ñ–∞–ª–æ–±–∞")],
                  [KeyboardButton(text="–ù–µ –º–æ–≥—É –≤–ª–∏—Ç—å—Å—è")]])


@lru_cache(maxsize=1)
def get_cant_join_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True,
                               keyboard=[[
                                   KeyboardButton(text="–ù–∞–∑–∞–¥"),
                                   KeyboardButton(text="–ù–µ –º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å")
                               ]])


@lru_cache(maxsize=1)
def get_back_button():
    return ReplyKeyboardMarkup(resize_keyboard=True,
                               keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]])


class Form(StatesGroup):
    role = State()
    age_verify = State()
    reason = State()
    duration = State()
    complaint = State()


# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞
async def is_member(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(GROUP_ID, user_id)
        return member.status in {"member", "administrator", "creator"}
    except Exception:
        return False


# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def check_message_limit(user_id: int) -> bool:
    count = message_counts.get(user_id, 0) + 1
    message_counts[user_id] = count
    return count <= MAX_MESSAGES


# Handlers


# Handlers
@dp.message(F.text.casefold() == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    user_id = message.from_user.id
    if not await is_member(user_id) and not check_message_limit(user_id):
        await message.answer(
            "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º. –ï—Å–ª–∏ —ç—Ç–æ –±–∞–≥, –Ω–∞–ø–∏—à–∏—Ç–µ <a href='https://t.me/alren15'>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>."
        )
        return

    member = await bot.get_chat_member(GROUP_ID, user_id)
    if member.status in {"member", "administrator", "creator"}:
        await message.answer(
            " <b>–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã</b>\n\nüéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_menu())
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
        chat_members = await bot.get_chat_member_count(GROUP_ID)
        if chat_members >= 50:
            await message.answer(
                "<b> –í –≥—Ä—É–ø–ø–µ —Å–µ–π—á–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.</b>\n\n –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –≤–∞—Å –ø—Ä–∏–º—É—Ç –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –º–µ—Å—Ç–∞."
            )

        await message.answer(
            f''' <b>–ß—Ç–æ –±—ã –≤—Å—Ç—É–ø–∏—Ç—å:</b>\n\nüè† –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å <a href='https://telegra.ph/%F0%9D%99%B5%F0%9D%9A%95%F0%9D%9A%98%F0%9D%9A%98%F0%9D%9A%8D-%F0%9D%9A%83%F0%9D%9A%91%F0%9D%9A%8E-%F0%9D%99%BB%F0%9D%9A%98%F0%9D%9A%9D%F0%9D%9A%9E%F0%9D%9A%9C-%F0%9D%9A%9B%F0%9D%9A%9E%F0%9D%9A%95%F0%9D%9A%8E%F0%9D%9A%9C-03-28'>–ø—Ä–∞–≤–∏–ª–∞–º–∏</a>\nüé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—É—é —Ä–æ–ª—å –∏–∑ <a href='https://t.me/info_TheMeiver/7'>—Å–ø–∏—Å–∫–∞</a>\n\n –ù–∞–ø–∏—à–∏—Ç–µ <b>—Ç–æ–ª—å–∫–æ —Ä–æ–ª—å</b> –±–µ–∑ —Ç–æ—á–∫–∏ –∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã. –ü—Ä–∏–º–µ—Ä: <b>–ó–µ–ª–µ</b>''',
            disable_web_page_preview=True,
            reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Form.role)


@dp.message(Form.role)
async def role_handler(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    await state.update_data(role=message.text.strip())
    await message.answer('''
<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:</b>

üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
üé• –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ

Ô∏è <b>–ù–µ –ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.</b> –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ <a href='https://t.me/alren15'>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>'''
                         )
    await state.set_state(Form.age_verify)


@dp.message(Form.age_verify, F.text)
async def age_verify_text_handler(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    user_id = message.from_user.id
    data = await state.get_data()
    role = data.get('role')
    user_data[user_id] = {"role": role}

    await message.answer(
        f' –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href="{GROUP_LINK}"><b>—Å—Å—ã–ª–∫–µ (–Ω–∞–∂–∞—Ç—å)</b></a>. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è - /start',
        disable_web_page_preview=True,
        reply_markup=get_menu())

    username = f" (@{message.from_user.username})" if message.from_user.username else ""
    admin_message = (
        f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!</b>\n\n"
        f"#Ô∏è‚É£ ID: <code>{user_id}</code>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{message.from_user.full_name}{username}</a>\n"
        f"üìå –†–æ–ª—å: <b>{role}</b>\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {message.text}\n\n")

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, admin_message)
    await state.clear()


@dp.message(Form.age_verify)
async def age_verify_any_handler(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    user_id = message.from_user.id
    data = await state.get_data()
    role = data.get('role')
    user_data[user_id] = {"role": role}

    await message.answer(
        f' –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href="{GROUP_LINK}"><b>—Å—Å—ã–ª–∫–µ (–Ω–∞–∂–∞—Ç—å)</b></a>. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. <b>–ù–µ —É–¥–∞–ª—è–π—Ç–µ —á–∞—Ç.</b>\n\n –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è - /start',
        disable_web_page_preview=True,
        reply_markup=get_menu())

    username = f" (@{message.from_user.username})" if message.from_user.username else ""
    admin_message = (
        f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!</b>\n\n"
        f"#Ô∏è‚É£ ID: <code>{user_id}</code>\n"
        f"üë§ –û—Ç: <a href='tg://user?id={user_id}'>{message.from_user.full_name}{username}</a>\n"
        f"üìå –†–æ–ª—å: <b>{role}</b>")

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, admin_message)
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ª—é–±–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.forward_message(admin_id, message.chat.id,
                                  message.message_id)
    await state.clear()


@dp.message(
    lambda message: message.text and message.text.lower().startswith("–Ω–∞–π–¥–∏ "))
async def photo(message: types.Message):
    user_id = message.from_user.id
    if not await is_member(user_id) and not check_message_limit(user_id):
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.")
        return

    query = message.text[6:].lower()
    GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')
    GOOGLE_CX_ID = os.environ.get('GOOGLE_CX_ID')

    if GOOGLE_API_KEY and GOOGLE_CX_ID:
        try:
            search_url = f"https://www.googleapis.com/customsearch/v1"
            params = {
                'key': GOOGLE_API_KEY,
                'cx': GOOGLE_CX_ID,
                'q': query,
                'searchType': 'image',
                'num': 10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                'safe': 'active',  # –í–∫–ª—é—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫
                'imgType': 'photo',  # –¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                'fileType': 'jpg,png,gif'  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            }
            response = requests.get(search_url, params=params)
            response.raise_for_status()
            data = response.json()

            if data.get('items'):
                # –•—Ä–∞–Ω–∏–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if user_id not in message_counts:
                    message_counts[user_id] = []

                for item in data['items']:
                    image_url = item.get('link')
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω—å—à–µ
                    if image_url and image_url not in message_counts[user_id]:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            img_response = requests.head(image_url, timeout=5)
                            content_type = img_response.headers.get(
                                'content-type', '')

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            if img_response.status_code == 200 and content_type.startswith(
                                    'image/'):
                                await bot.send_photo(message.chat.id,
                                                     image_url)
                                message_counts[user_id].append(image_url)
                                return
                        except Exception as e:
                            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                            logging.warning(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_url}: {e}"
                            )
                            continue

                await message.answer("–ò–∑–≤–∏–Ω–∏, –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.")
            else:
                await message.answer("–ò–∑–≤–∏–Ω–∏, –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.")
        except requests.exceptions.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google API: {e}")
            await message.answer("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
            await message.answer("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@dp.message(F.text.lower().startswith("—ç–º–æ–¥–∑–∏"))
async def set_custom_emoji(message: types.Message):
    if message.chat.type not in {ChatType.GROUP, ChatType.SUPERGROUP}:
        return

    user_id = message.from_user.id
    emoji = message.text.split(
        maxsplit=1)[1].strip() if len(message.text.split()) > 1 else None

    if not emoji:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    if 'user_emojis' not in user_data:
        user_data['user_emojis'] = {}

    user_data['user_emojis'][user_id] = emoji
    await message.reply(f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {emoji}")


@dp.message(lambda message: message.text and message.text.lower() in
            {"–∞—É—Ñ", "–±–æ—Ç", "–∞—É—Ñ –±–æ—Ç"})
async def handle_keywords(message: types.Message):
    if message.chat.type in {ChatType.GROUP, ChatType.SUPERGROUP}:
        await message.reply("–í—Å–µ –º–æ–∏ –≤–æ–ª–∫–∏ –¥–µ–ª–∞—é—Ç –∞—É—Ñ ‚òùÔ∏èüê∫")


@dp.message(F.text.casefold().startswith("–∑–∞—Å–æ—Å–∞—Ç—å"))
async def kiss_handler(message: types.Message):
    if message.chat.type not in {ChatType.GROUP, ChatType.SUPERGROUP}:
        return

    if not message.reply_to_message:
        return

    sender = message.from_user
    target = message.reply_to_message.from_user

    if target.is_bot:
        return

    kiss_message = f"üíã | <a href='tg://user?id={sender.id}'>{sender.full_name}</a> –∂—ë—Å—Ç–∫–æ –∑–∞—Å–æ—Å–∞–ª <a href='tg://user?id={target.id}'>{target.full_name}</a>"
    await message.answer(kiss_message)


@dp.message(F.text == "–†–µ—Å—Ç")
async def request_rest(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    user_id = message.from_user.id
    if not await is_member(user_id):
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.",
                             reply_markup=get_menu())
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–µ—Å—Ç–∞:",
                         reply_markup=get_back_button())
    await state.set_state(Form.reason)


@dp.message(Form.reason)
async def rest_reason(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    if message.text == "–ù–∞–∑–∞–¥":
        await back_to_menu(message, state)
        return
    await state.update_data(reason=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ä–æ–∫ —Ä–µ—Å—Ç–∞:")
    await state.set_state(Form.duration)


@dp.message(Form.duration)
async def rest_duration(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(Form.reason)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–µ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ:",
                             reply_markup=get_back_button())
        return

    user_id = message.from_user.id
    data = await state.get_data()
    role = await bot.get_chat_member(GROUP_ID, user_id)
    username = f" (@{message.from_user.username})" if message.from_user.username else ""

    admin_message = f'''<b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—Å—Ç</b>

#Ô∏è‚É£ ID: <code>{user_id}</code>
üìå –†–æ–ª—å: <b>{role.custom_title if role.custom_title else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</b>
‚åõÔ∏è –°—Ä–æ–∫: {message.text}
–ü—Ä–∏—á–∏–Ω–∞: {data['reason']}'''

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, admin_message)

    await message.answer(
        "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
        reply_markup=get_menu())
    await state.clear()


@dp.message(F.text == "–ñ–∞–ª–æ–±–∞")
async def complaint(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    user_id = message.from_user.id
    if not await is_member(user_id):
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.",
                             reply_markup=get_menu())
        return
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É:",
                         reply_markup=get_back_button())
    await state.set_state(Form.complaint)


@dp.message(Form.complaint)
async def handle_complaint(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    if message.text == "–ù–∞–∑–∞–¥":
        await back_to_menu(message, state)
        return

    user_id = message.from_user.id
    username = f" (@{message.from_user.username})" if message.from_user.username else ""

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, f'''üîî <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞:</b>

{message.text}''')

    await message.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.",
                         reply_markup=get_menu())
    await state.clear()


class CantJoinState(StatesGroup):
    waiting_for_admin = State()
    waiting_for_info = State()


@dp.message(F.text == "–ù–µ –º–æ–≥—É –≤–ª–∏—Ç—å—Å—è")
async def cant_join_handler(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    user_id = message.from_user.id
    if not await is_member(user_id):
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.",
                             reply_markup=get_menu())
        return
    await message.answer(
        "<b> –ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —Ç–æ –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è.</b>\n\n –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ <a href=\"https://telegra.ph/Ankety-Administracii-Flood-The-Meiver-05-14\"><b>—Å–ø–∏—Å–∫–∞</b></a> –∞–Ω–∫–µ—Ç—É –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º.",
        reply_markup=get_cant_join_keyboard())
    await state.set_state(CantJoinState.waiting_for_admin)


@dp.message(CantJoinState.waiting_for_admin)
async def handle_admin_choice(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await back_to_menu(message, state)
        return
    elif message.text == "–ù–µ –º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å":
        await message.answer(
            "<b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ.</b>\n\n –ù–∞–ø—Ä–∏–º–µ—Ä: –∏–Ω—Ç–µ—Ä–µ—Å—ã, —É–≤–ª–µ—á–µ–Ω–∏—è, —Ñ–∞–Ω–¥–æ–º—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        await state.set_state(CantJoinState.waiting_for_info)
    else:
        await state.update_data(admin_choice=message.text)
        await message.answer(
            "<b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ.</b>\n\n –ù–∞–ø—Ä–∏–º–µ—Ä: –∏–Ω—Ç–µ—Ä–µ—Å—ã, —É–≤–ª–µ—á–µ–Ω–∏—è, —Ñ–∞–Ω–¥–æ–º—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        await state.set_state(CantJoinState.waiting_for_info)


@dp.message(CantJoinState.waiting_for_info)
async def handle_user_info(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await back_to_menu(message, state)
        return

    data = await state.get_data()
    admin_choice = data.get('admin_choice', '–Ω–µ –≤—ã–±—Ä–∞–Ω')

    user_id = message.from_user.id
    username = f" (@{message.from_user.username})" if message.from_user.username else ""

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if user_id in user_data:
        user_role = user_data[user_id].get("custom_title", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    admin_message = f'''<b>–ù–µ –º–æ–∂–µ—Ç –≤–ª–∏—Ç—å—Å—è!</b>\n
#Ô∏è‚É£ ID: <code>{user_id}</code>
üìå –†–æ–ª—å: <b>{user_role}</b>{username}
‚≠êÔ∏è –§–∞–≤–æ—Ä–∏—Ç: <b>{admin_choice}</b>
–û —Å–µ–±–µ: {message.text}'''

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, admin_message)

    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", reply_markup=get_menu())
    await state.clear()


@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=get_menu())
    await state.clear()


@dp.chat_member()
async def chat_member_handler(update: types.ChatMemberUpdated):
    chat_id = update.chat.id
    if chat_id != GROUP_ID:
        return

    old_status = update.old_chat_member.status if update.old_chat_member else None
    new_status = update.new_chat_member.status if update.new_chat_member else None
    user_id = update.new_chat_member.user.id

    logging.info(
        f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {old_status} -> {new_status} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    if (old_status == "member"
            and new_status == "left") or (old_status == "administrator"
                                          and new_status == "left"):
        if user_id in user_data:
            custom_title = user_data[user_id].get("custom_title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            username = f" (@{update.new_chat_member.user.username})" if update.new_chat_member.user.username else ""
            leave_message = f"üò¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>{update.new_chat_member.user.full_name}{username}</a> —Å —Ä–æ–ª—å—é <b>{custom_title}</b> –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É"
            await bot.send_message(chat_id, leave_message)

            admin_message = f'''<b>–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É</b>\n
üò¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{update.new_chat_member.user.full_name}{username}</a>\nüé≠ –†–æ–ª—å: <b>{custom_title}</b>'''
            for admin_id in ADMIN_IDS:
                await bot.send_message(admin_id, admin_message)

            # Send notification to LIST_ADMIN_ID
            for admin_id in LIST_ADMIN_ID:
                await bot.send_message(
                    admin_id, f"–û—Å–≤–æ–±–æ–¥–∏–ª–∞—Å—å —Ä–æ–ª—å: <b>{custom_title}</b>")

            if 'user_emojis' in user_data and user_id in user_data[
                    'user_emojis']:
                del user_data['user_emojis'][user_id]
            user_data.pop(user_id, None)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
    if new_status == "member" and user_id in user_data and not update.new_chat_member.user.is_bot:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            bot_member = await bot.get_chat_member(chat_id, (await
                                                             bot.me()).id)
            if not bot_member.can_promote_members:
                logging.error(
                    f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ {chat_id}")
                for admin_id in ADMIN_IDS:
                    await bot.send_message(
                        admin_id,
                        f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ {chat_id}"
                    )
                return

            role = user_data[user_id]["role"]
            await bot.promote_chat_member(chat_id,
                                          user_id,
                                          can_change_info=False,
                                          can_delete_messages=False,
                                          can_invite_users=False,
                                          can_restrict_members=False,
                                          can_pin_messages=True,
                                          can_promote_members=False)
            await bot.set_chat_administrator_custom_title(
                chat_id, user_id, role)
            user_data[user_id]["custom_title"] = role

            members = await bot.get_chat_administrators(chat_id)
            tags = []
            emojis = [
                "‚≠êÔ∏è", "üåü", "üí´", "‚ö°Ô∏è", "üî•", "‚ù§Ô∏è", "üíû", "üíï", "‚ù£Ô∏è", "üíå", "üåà", "‚ú®",
                "üéØ", "üé™", "üé®", "üé≠", "üé™", "üé¢", "üé°", "üé†", "üé™", "üå∏", "üå∫", "üå∑",
                "üåπ", "üåª", "üåº", "üíê", "üåæ", "üåø", "‚òòÔ∏è", "üçÄ", "üçÅ", "üçÇ", "üçÉ", "üåµ",
                "üå¥", "üå≥", "üå≤", "üéÑ", "üåä", "üåà", "‚òÄÔ∏è", "üå§", "‚õÖÔ∏è", "‚òÅÔ∏è", "üå¶", "üå®",
                "‚ùÑÔ∏è", "‚òÉÔ∏è", "üå¨", "üí®", "üå™", "üå´", "üåà", "‚òîÔ∏è", "‚ö°Ô∏è", "‚ùÑÔ∏è", "üîÆ",
                "üéÆ", "üé≤", "üéØ", "üé≥", "üé™", "üé≠", "üé®", "üé¨", "üé§", "üéß", "üéº", "üéπ",
                "ü•Å", "üé∑", "üé∫", "üé∏", "ü™ï", "üéª", "üé≤", "‚ôü", "üéØ", "üé≥", "üéÆ", "üé∞",
                "üß©", "üé™", "üé≠", "üé®", "üñº", "üé®", "üßµ", "üß∂", "üëë", "üíé", "‚öúÔ∏è"
            ]

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if 'user_emojis' not in user_data:
                user_data['user_emojis'] = {}

            # –ù–∞–∑–Ω–∞—á–∞–µ–º —ç–º–æ–¥–∑–∏ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
            if user_id not in user_data['user_emojis']:
                available_emojis = [
                    e for e in emojis
                    if e not in user_data['user_emojis'].values()
                ]
                if available_emojis:
                    user_data['user_emojis'][user_id] = random.choice(
                        available_emojis)

            for member in members:
                if not member.user.is_bot:
                    member_id = member.user.id
                    if member_id not in user_data['user_emojis']:
                        available_emojis = [
                            e for e in emojis
                            if e not in user_data['user_emojis'].values()
                        ]
                        if available_emojis:
                            user_data['user_emojis'][
                                member_id] = random.choice(available_emojis)

                    emoji = user_data['user_emojis'].get(member_id, "üë§")
                    tag = f"<a href='tg://user?id={member_id}'>{emoji}</a>"
                    tags.append(tag)
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–≥–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10
            tag_chunks = [tags[i:i + 10] for i in range(0, len(tags), 10)]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id,
                f'''üì¢ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: <a href='tg://user?id={update.new_chat_member.user.id}'>{update.new_chat_member.user.full_name}</a>
üé≠ –†–æ–ª—å: <b>{role}</b>''')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ —Å —ç–º–æ–¥–∑–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            for chunk in tag_chunks:
                chunk_text = " ".join(chunk)
                await bot.send_message(chat_id, chunk_text)
                await asyncio.sleep(
                    1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å —Ç–µ–≥–∞–º–∏
            await bot.send_message(user_id,
                                   f'''üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–µ–Ω—é.''',
                                   reply_markup=get_menu())

            # Send notification to LIST_ADMIN_ID
            for admin_id in LIST_ADMIN_ID:
                await bot.send_message(admin_id, f"–ó–∞–Ω—è—Ç–∞ —Ä–æ–ª—å: {role}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
            for admin_id in ADMIN_IDS:
                await bot.send_message(
                    admin_id,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.new_chat_member.user.full_name}: {str(e)}"
                )
    elif update.new_chat_member.status in {"left", "kicked"}:
        if user_id in user_data:
            custom_title = user_data[user_id].get("custom_title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            username = f" (@{update.new_chat_member.user.username})" if update.new_chat_member.user.username else ""
            leave_message = f"üò¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>{update.new_chat_member.user.full_name}{username}</a> —Å —Ä–æ–ª—å—é <b>{custom_title}</b> –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            await bot.send_message(chat_id, leave_message)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            admin_message = f'''<b>–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É</b>\n
üò¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={user_id}'>{update.new_chat_member.user.full_name}{username}</a>
üé≠ –†–æ–ª—å: <b>{custom_title}</b>'''
            for admin_id in ADMIN_IDS:
                await bot.send_message(admin_id, admin_message)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ä–æ–ª–∏ –≤ LIST_ADMIN_ID
            for admin_id in LIST_ADMIN_ID:
                await bot.send_message(
                    admin_id, f"–û—Å–≤–æ–±–æ–¥–∏–ª–∞—Å—å —Ä–æ–ª—å:<b>{custom_title}</b>")

            # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if 'user_emojis' in user_data and user_id in user_data[
                    'user_emojis']:
                del user_data['user_emojis'][user_id]
            user_data.pop(user_id, None)


# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
async def save_existing_members_titles():
    try:
        chat = await bot.get_chat(GROUP_ID)
        members = await bot.get_chat_administrators(GROUP_ID)
        for member in members:
            if member.custom_title and member.user.id not in user_data:
                user_data[member.user.id] = {
                    "role": member.custom_title,
                    "custom_title": member.custom_title
                }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∏—Ç—É–ª–æ–≤: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(lambda m: m.text and m.text.lower().startswith("—Å—á—ë—Ç ") and m.
            reply_to_message)
async def count_symbols(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
    symbol = message.text[5:].strip()
    if not symbol:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    target_text = message.reply_to_message.text or message.reply_to_message.caption
    if not target_text:
        await message.reply("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
    count = target_text.count(symbol)
    await message.reply(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞: {count}')


@dp.message(lambda m: m.chat.type == ChatType.PRIVATE and m.from_user.id in
            ADMIN_IDS and m.text and m.text.lower().startswith("—Å–∫–∞–∑–∞—Ç—å "))
async def admin_say_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "—Å–∫–∞–∑–∞—Ç—å"
        text_to_say = message.text[7:].strip()
        if not text_to_say:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await bot.send_message(GROUP_ID, text_to_say)
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


@dp.message()
async def handle_admin_response(message: types.Message):
    try:
        # –ê–Ω—Ç–∏—Å–ø–∞–º –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã
        if (message.chat.type == ChatType.PRIVATE 
            and message.from_user.id not in ADMIN_IDS):

            user_id = message.from_user.id
            if not await is_member(user_id) and not check_message_limit(user_id):
                await message.answer(
                    "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º. –ï—Å–ª–∏ —ç—Ç–æ –±–∞–≥, –Ω–∞–ø–∏—à–∏—Ç–µ <a href='https://t.me/alren15'>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</a>."
                )
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        if (message.chat.type == ChatType.PRIVATE 
            and message.from_user.id not in ADMIN_IDS 
            and message.reply_to_message):
            
            reply_text = message.reply_to_message.text or message.reply_to_message.caption or ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if "–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:" in reply_text:
                user = message.from_user
                user_id = user.id
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
                admin_notification = f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user.full_name}</b> –æ—Ç–≤–µ—Ç–∏–ª:
                
<code>{message.text}</code>'''

                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(admin_id, admin_notification, parse_mode=ParseMode.HTML)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
                await message.reply("–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –Ω–∞ –∑–∞—è–≤–∫—É
        if not (message.chat.type == ChatType.PRIVATE and message.from_user.id
                in ADMIN_IDS and message.reply_to_message):
            return

        reply_text = message.reply_to_message.text or message.reply_to_message.caption or ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ –∑–∞—è–≤–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å
        if not any(keyword in reply_text for keyword in [
            "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ!", 
            "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—Å—Ç",
            "–ù–µ –º–æ–∂–µ—Ç –≤–ª–∏—Ç—å—Å—è!",
            "–æ—Ç–≤–µ—Ç–∏–ª:"
        ]):
            return

        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        user_id = None
        for line in reply_text.split('\n'):
            if line.startswith("#Ô∏è‚É£ ID:"):
                user_id_str = line.split(":")[1].strip().replace(
                    "<code>", "").replace("</code>", "")
                if user_id_str.isdigit():
                    user_id = int(user_id_str)
                break

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –µ—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω
        if not user_id and "tg://user?id=" in reply_text:
            user_id = int(reply_text.split("tg://user?id=")[1].split("'")[0])

        if not user_id:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            admin = message.from_user
            target_user = await bot.get_chat(user_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                user_id,
                f"<b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}",
                parse_mode=ParseMode.HTML)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

            notification_text = f"{admin.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç {target_user.full_name}:\n\n<code>{message.text}</code>"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMIN_IDS:
                if admin_id != message.from_user.id:
                    try:
                        await bot.send_message(admin_id,
                                               notification_text,
                                               parse_mode=ParseMode.HTML)
                    except Exception as e:
                        logging.error(
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}"
                        )

            await message.reply(f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

        except Exception as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {str(e)}"
            if "user is deactivated" in str(
                    e) or "bot was blocked by the user" in str(e):
                error_msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç"
            await message.reply(error_msg)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: {str(e)}",
                      exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


async def main():
    try:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await save_existing_members_titles()
        logging.info("Bot started")
        await dp.start_polling(bot, allowed_updates=["message", "chat_member"])
    except Exception as e:
        logging.error(f"Error: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
