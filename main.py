import pip


import logging
import asyncio
import random
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode, ChatType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ChatPermissions, ReplyKeyboardMarkup, KeyboardButton
from flask import Flask
import threading
import datetime
import requests
import json
import re

import os

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ['BOT_TOKEN']
ADMIN_IDS = [int(id) for id in os.environ['ADMIN_IDS'].split(',')]
GROUP_ID = int(os.environ['GROUP_ID'])
GROUP_LINK = os.environ['GROUP_LINK']
UNSPLASH_ACCESS_KEY = os.environ.get('UNSPLASH_ACCESS_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    role = State()
    reason = State()
    duration = State()
    complaint = State()

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
def get_menu():
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–†–µ—Å—Ç"), KeyboardButton(text="–ñ–∞–ª–æ–±–∞")]
    ])

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
def get_back_button():
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ])

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ
async def is_member(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(GROUP_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ—Å—Ç"
@dp.message(F.text == "–†–µ—Å—Ç")
async def request_rest(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return  
    user_id = message.from_user.id
    if not await is_member(user_id):
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.", reply_markup=get_menu())
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–µ—Å—Ç–∞:", reply_markup=get_back_button())
    await state.set_state(Form.reason)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã —Ä–µ—Å—Ç–∞
@dp.message(Form.reason)
async def rest_reason(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return  
    if message.text == "–ù–∞–∑–∞–¥":
        await back_to_menu(message, state)
        return
    await state.update_data(reason=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ä–æ–∫ —Ä–µ—Å—Ç–∞:")
    await state.set_state(Form.duration)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–æ–∫–∞ —Ä–µ—Å—Ç–∞
@dp.message(Form.duration)
async def rest_duration(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return  
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(Form.reason)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–µ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ:", reply_markup=get_back_button())
        return
    data = await state.get_data()
    role = await bot.get_chat_member(GROUP_ID, message.from_user.id)
    admin_message = f'''üîî <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—Å—Ç</b>
üìå –†–æ–ª—å: {role.custom_title if role.custom_title else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚öôÔ∏è –ü—Ä–∏—á–∏–Ω–∞: {data['reason']}
‚åõÔ∏è –°—Ä–æ–∫: {message.text}'''
    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, admin_message)
    await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É.", reply_markup=get_menu())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ñ–∞–ª–æ–±–∞"
@dp.message(F.text == "–ñ–∞–ª–æ–±–∞")
async def complaint(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return  
    user_id = message.from_user.id
    if not await is_member(user_id):
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.", reply_markup=get_menu())
        return
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É:", reply_markup=get_back_button())
    await state.set_state(Form.complaint)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–∞–ª–æ–±—ã
@dp.message(Form.complaint)
async def handle_complaint(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return  
    if message.text == "–ù–∞–∑–∞–¥":
        await back_to_menu(message, state)
        return
    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, f'''üîî <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç</b> {message.from_user.full_name}:
{message.text}''')
    await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∂–∞–ª–æ–±—É.", reply_markup=get_menu())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return  
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=get_menu())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É
@dp.chat_member()
async def user_joins_chat(update: types.ChatMemberUpdated):
    user_id = update.new_chat_member.user.id
    chat_id = update.chat.id
    if chat_id == GROUP_ID:
        if update.new_chat_member.status == "member" and user_id in user_data and not update.new_chat_member.user.is_bot:
            role = user_data[user_id]["role"]
            await bot.promote_chat_member(chat_id, user_id, can_change_info=False, can_delete_messages=False,
                                          can_invite_users=False, can_restrict_members=False, can_pin_messages=True,
                                          can_promote_members=False)
            await bot.set_chat_administrator_custom_title(chat_id, user_id, role)
            members = await bot.get_chat_administrators(chat_id)
            tags = []
            emojis = ["üî•", "‚ö°", "üí•", "üöÄ", "üéØ", "üîî", "üéâ"]
            for member in members:
                if not member.user.is_bot and member.user.id != user_id and member.status in ["member", "administrator"]:
                    if member.user.username:
                        emoji = random.choice(emojis)
                        tag = f"<a href='tg://user?id={member.user.id}'>{emoji}</a>"
                        tags.append(tag)
            mention_text = " ".join(tags)
            await bot.send_message(
                chat_id,
                f'''üì¢ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: <b>{update.new_chat_member.user.full_name}</b>
üé≠ –†–æ–ª—å: <b>{role}</b>
{mention_text}'''
            )
            await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–µ–Ω—é.", reply_markup=get_menu())
        elif update.new_chat_member.status in ["left", "kicked"]:
            user_data.pop(user_id, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text.casefold() == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    if message.chat.type != ChatType.PRIVATE:
        return  
    user_id = message.from_user.id
    member = await bot.get_chat_member(GROUP_ID, user_id)
    if member.status in ["member", "administrator", "creator"]:
        await message.answer("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.", reply_markup=get_menu())
    else:
        remove_keyboard = types.ReplyKeyboardRemove()
        await message.answer(
            "–ó–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å <a href='https://telegra.ph/Pravila-02-08-160'>–ø—Ä–∞–≤–∏–ª–∞–º–∏</a>. –ù–∞–ø–∏—à–∏—Ç–µ —Ä–æ–ª—å —Ç–∞–∫, –∫–∞–∫ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ <a href='https://t.me/stellarpassion/9'>—Å–ø–∏—Å–∫–µ</a>. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ–∑ —Ç–æ—á–∫–∏ –∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–Ω–∞",
            disable_web_page_preview=True,
            reply_markup=remove_keyboard
        )
        await state.set_state(Form.role)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
@dp.message(F.text.startswith("/"))
async def animal_photo(message: types.Message):
    animal = message.text[1:].lower()
    if UNSPLASH_ACCESS_KEY:
        try:
            response = requests.get(f"https://api.unsplash.com/search/photos?query={animal}&client_id={UNSPLASH_ACCESS_KEY}")
            response.raise_for_status()
            data = response.json()
            if data['results']:
                random_photo = random.choice(data['results'])
                await bot.send_photo(message.chat.id, random_photo['urls']['regular'])
            else:
                await message.answer("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à–µ–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —ç—Ç–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.")
        except requests.exceptions.RequestException as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Unsplash: {e}")
        except (KeyError, IndexError) as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Unsplash: {e}")
    else:
        await message.answer("API –∫–ª—é—á Unsplash –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Flask-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route('/')
def home():
    logging.info("Uptime Robot checked the bot status")
    return f"""
    <html>
        <head><title>Bot Status</title></head>
        <body>
            <h1>Bot Status</h1>
            <p>Bot is running!</p>
            <p>Last update: {datetime.datetime.now()}</p>
        </body>
    </html>
    """

def run_flask():
    app.run(host="0.0.0.0", port=8080, threaded=True)

flask_thread = threading.Thread(target=run_flask, daemon=True)
flask_thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    while True:
        try:
            # Register all message handlers
            dp.message.register(start_handler, F.text.casefold() == "/start")
            dp.message.register(request_rest, F.text == "–†–µ—Å—Ç")
            dp.message.register(rest_reason, Form.reason)
            dp.message.register(rest_duration, Form.duration)
            dp.message.register(complaint, F.text == "–ñ–∞–ª–æ–±–∞")
            dp.message.register(handle_complaint, Form.complaint)
            dp.message.register(back_to_menu, F.text == "–ù–∞–∑–∞–¥")
            dp.chat_member.register(user_joins_chat)
            dp.message.register(animal_photo, F.text.startswith("/"))
            
            logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            await dp.start_polling(bot)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
            logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)
        except KeyboardInterrupt:
            logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
            break

if __name__ == "__main__":
    asyncio.run(main())
